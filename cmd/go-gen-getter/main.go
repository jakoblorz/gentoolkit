package main

import (
	"flag"
	"os"
	"strings"
	"text/template"

	"github.com/jakoblorz/go-gentoolkit/structutil"
)

var getterTemplate = template.Must(template.New("getter").Parse(`
func ({{.Receiver}} *{{.Struct}}) Get{{.Field}}() {{.Type}} {
	return {{.Receiver}}.{{.Field}}
}`))

func generateGetter(info *structutil.StructInfo, p structutil.PrinterWriter) {
	p.Printf("// Code generated by \"go-gen-getter %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	p.Printf("\n")
	p.Printf("package %s\n", info.Package.GetName())
	p.Printf("\n\n")
	for _, field := range info.Fields {
		getterTemplate.Execute(p, map[string]string{
			"Receiver": strings.ToLower(info.Name[0:1]),
			"Struct":   info.Name,
			"Field":    field.Name,
			"Type":     field.Type,
		})
	}
}

var generator = structutil.NewForFieldsGenerator(&structutil.GenerateForFieldsConfig{
	ToolName:    "go-gen-getter",
	FileSuffix:  "getter",
	GoFmtOutput: true,
}, generateGetter)

func init() {
	generator.Init()
}

func main() {
	generator.OpinionatedPreRun()
	flag.Parse()

	generator.Run()
}
